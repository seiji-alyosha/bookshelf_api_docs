openapi: 3.1.0
info:
  version: 1.0.0
  title: Ennoia API
  termsOfService: https://example.com/terms/
  contact:
    name: Jake Tanis
    email: jakktan@gmail.com
    url: https://github.com/seiji-alyosha
  license:
    name:
    url:
  x-logo:
    url: docs\Ennoia.svg
    altText: Ennoia logo
  description: >
    You can access all of your books and book notes from Ennoia using the API.
externalDocs:
  description: "Find out how to create a GitHub repo for your OpenAPI definition."
  url: 'https://github.com/Redocly/create-openapi-repo'
tags: #where the tags are defined and can be used in paths for a specific endpoint.
  - name: One book
  - name: All books
  - name: Authentication
x-tagGroups: #organizes the defined tags (from the previous section) into a larger category. In the UI, this is the heading above the two endpoint tags.
  - name: Endpoints
    tags:
      - One book
      - All books
      - Authentication
servers:
  - url: https://{tenant}/api/v1
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://example.com/api/v1
paths:    
  /books/{id}:
    get:
      tags:
      - One book
      summary: "Gets information about a book."
      description: "Gets the title, author, notes, and the added date of a book based on the book id. "
      operationId: GetBookInfo
      parameters:
        - name: id
          # where the parameter is located (path/query/header/cookie)
          in: path
          # either true or false. Path parameters are always true.
          required: true
          # data type and constraints 
          schema:
            type: integer
          # minimum:
      responses:        
      # unsuccessful 
        '404':
          description: "Book not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Sorry, we couldn't find a book with that id. Please try a different id."
  /books:
    get:
      tags:
        - All books
      summary: "Gets information about all books in the user's library."
      description: "Gets the title, author, notes, and added date for all books added by the user. "
      operationId: GetAllBooks
      
components:
  securitySchemes:
    main_auth:
      description: "Example description text of the OAuth2 scheme."
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            'read:users': read user info
            'write:users': modify or remove users
    api_key:
      description: "Example description text of the API key scheme."
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
webhooks:
  userInfo:
    post:
      summary: New user webhook
      description: "Information about a new user in the system."
      operationId: userInfo
      tags:
        - Info
      requestBody:
        content:
          application/json:
            schema:
              $ref: #'components/schemas/User.yaml'
      responses:
        '200':
          description: "Successfully retrieved information about a new user."
      security:
        - api_key: []
